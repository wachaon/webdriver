{
    "{3C8C790D-980E-4E2C-AA80-55894C869AAD}": {
        "source": "(function $43$3A$2F$62$69$6E$2F$67$69$74$68$75$62$2F$77$65$62$64$72$69$76$65$72$2F$69$6E$64$65$78$2E$6A$73() { \"use strict\";const WShell = require(\"WScript.Shell\");\nconst { eraseInLine, cursorHrAbs, brightGreen } = require(\"ansi\");\nconst { download } = require(\"filesystem\");\nconst { resolve, WorkingDirectory } = require(\"pathname\");\n\nconst GET = \"GET\";\nconst POST = \"POST\";\nconst DELETE = \"DELETE\";\nconst BOL = cursorHrAbs(1); // beginning of line\nconst ELEMENT_ID = \"element-6066-11e4-a52e-4f735466cecf\";\nconst State = [\n  \"UNINITIALIZED\",\n  \"LOADING\",\n  \"LOADED\",\n  \"INTERACTIVE\",\n  \"COMPLETED\",\n];\nconst spiner = progress([\"|\", \"/\", \"-\", \"\\\\\", \"|\", \"/\", \"-\", \"\\\\\"]);\n\nclass Window {\n  constructor(port, spec) {\n    const IServerXMLHTTPRequest2 = require(\"MSXML2.ServerXMLHTTP\");\n\n    port = port || findUnusedPort(9515);\n    spec = spec || \"msedgedriver.exe\";\n    const driver = WShell.Exec(`${spec} port=${port}`);\n    while (driver.Status != 0) {\n      console.print(\"%S%S %S\", eraseInLine(1), \"driver \", spiner());\n      WScript.Sleep(50);\n    }\n    var { value } = request(\n      IServerXMLHTTPRequest2,\n      POST,\n      `http://localhost:${port}/session`,\n      {\n        capabilities: {},\n      },\n      \"Initialize\"\n    );\n    const { sessionId } = value;\n\n    this.port = port;\n    this.driver = driver;\n    this.sessionId = sessionId;\n    this.IServerXMLHTTPRequest2 = IServerXMLHTTPRequest2;\n    this.document = new Document(this);\n  }\n  rect(prop) {\n    // {x, y, width, height}\n    request(\n      this.IServerXMLHTTPRequest2,\n      POST,\n      `http://localhost:${this.port}/session/${this.sessionId}/window/rect`,\n      prop,\n      \"window rect\"\n    );\n  }\n  navigate(url) {\n    request(\n      this.IServerXMLHTTPRequest2,\n      POST,\n      `http://localhost:${this.port}/session/${this.sessionId}/url`,\n      {\n        url: url,\n      },\n      \"Navegate\"\n    );\n  }\n  close(messame) {\n    request(\n      this.IServerXMLHTTPRequest2,\n      DELETE,\n      `http://localhost:${this.port}/session/${this.sessionId}/window`,\n      null,\n      \"Close Window\"\n    );\n    request(\n      this.IServerXMLHTTPRequest2,\n      DELETE,\n      `http://localhost:${this.port}/session/${this.sessionId}`,\n      null,\n      \"Delete Session\"\n    );\n    this.driver.Terminate();\n    console.log(messame || \"\");\n  }\n  getURL() {\n    const res = request(\n      this.IServerXMLHTTPRequest2,\n      GET,\n      `http://localhost:${this.port}/session/${this.sessionId}/url`,\n      null,\n      \"Get URL\"\n    );\n    return res ? res.value : null;\n  }\n  back() {\n    request(\n      this.IServerXMLHTTPRequest2,\n      POST,\n      `http://localhost:${this.port}/session/${this.sessionId}/back`,\n      {},\n      \"History Back\"\n    );\n  }\n  getStatus() {\n    const res = request(\n      this.IServerXMLHTTPRequest2,\n      GET,\n      `http://localhost:${this.port}/status`,\n      null,\n      \"status\"\n    );\n    if (res) return res.value;\n  }\n  getCookie(name) {\n    const url =\n      `http://localhost:${this.port}/session/${this.sessionId}/cookie` +\n      (name != null ? \"/\" + name : \"\");\n    const res = request(\n      this.IServerXMLHTTPRequest2,\n      GET,\n      url,\n      null,\n      \"Get Cookie\"\n    );\n    return res ? res.value : null;\n  }\n  addCookie(field) {\n    const cookie = { cookie: field };\n    const res = request(\n      this.IServerXMLHTTPRequest2,\n      POST,\n      `http://localhost:${this.port}/session/${this.sessionId}/cookie`,\n      cookie,\n      \"Add Cookie\"\n    );\n    return res ? res.value : null;\n  }\n  deleteCookie(name) {\n    request(\n      this.IServerXMLHTTPRequest2,\n      DELETE,\n      `http://localhost:${this.port}/session/${this.sessionId}/cookie/${name}`,\n      null,\n      \"Delete Cookie\"\n    );\n  }\n}\n\nclass Document {\n  constructor(window) {\n    this.parentWindow = window;\n  }\n  querySelectorAll(selector) {\n    const window = this.parentWindow;\n    const res = request(\n      window.IServerXMLHTTPRequest2,\n      POST,\n      `http://localhost:${window.port}/session/${window.sessionId}/elements`,\n      {\n        using: \"css selector\",\n        value: selector,\n      },\n      \"Select Elements\"\n    );\n    const elms =\n      res != null\n        ? res.value.map((val) => new Element(this, val[ELEMENT_ID]))\n        : null;\n    return elms;\n  }\n  getTitle() {\n    const window = this.parentWindow;\n    return request(\n      window.IServerXMLHTTPRequest2,\n      GET,\n      `http://localhost:${window.port}/session/${window.sessionId}/title`\n    );\n  }\n}\n\nclass Element {\n  constructor(document, elementId) {\n    this.parentDocument = document;\n    this.elementId = elementId;\n  }\n  querySelectorAll(selector) {\n    const document = this.parentDocument;\n    const window = document.parentWindow;\n    const res = require(window.IServerXMLHTTPRequest2, POST, `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/elements`, {\n      using: \"css selector\",\n      value: selector,\n    }, \"Select Elements\");\n    const elms =\n      res != null\n        ? res.value.map((val) => new Element(document, val[ELEMENT_ID]))\n        : null;\n    return elms;\n  }\n  getAttribute(attribute) {\n    const window = this.parentDocument.parentWindow;\n    const res = request(\n      window.IServerXMLHTTPRequest2,\n      GET,\n      `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/attribute/${attribute}`,\n      null,\n      \"Get Attribute\"\n    );\n    return res ? res.value : \"null\";\n  }\n  getProperty(property) {\n    const window = this.parentDocument.parentWindow;\n    const res = request(\n      window.IServerXMLHTTPRequest2,\n      GET,\n      `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/property/${property}`,\n      null,\n      \"Get Property\"\n    );\n    return res ? res.value : \"null\";\n  }\n  click() {\n    const window = this.parentDocument.parentWindow;\n    request(\n      window.IServerXMLHTTPRequest2,\n      POST,\n      `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/click`,\n      {},\n      \"Click Element\"\n    );\n  }\n  setValue(text) {\n    const window = this.parentDocument.parentWindow;\n    request(\n      window.IServerXMLHTTPRequest2,\n      POST,\n      `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/value`,\n      {\n        text,\n      },\n      \"Input Value\"\n    );\n  }\n}\n\nfunction getWebDriver() {\n  const version = WShell.exec(\n    \"powershell -Command Get-AppxPackage -Name Microsoft.MicrosoftEdge.* | foreach{$_.Version}\"\n  ).StdOut.ReadAll();\n\n  const architecture =\n    require(\"WScript.Shell\")\n      .Environment(\"Process\")\n      .Item(\"PROCESSOR_ARCHITECTURE\") === \"x86\"\n      ? \"32\"\n      : \"64\";\n\n  const url = `https://msedgedriver.azureedge.net/${version}/edgedriver_win${architecture}.zip`;\n\n  download(url, resolve(WorkingDirectory, `edgedriver_win${architecture}.zip`));\n  console.log(\"%sDownload of webdriver is complete!\", brightGreen);\n}\n\n// util\nfunction request(\n  Server,\n  method,\n  url,\n  parameter,\n  processing = \"\",\n  finished = \"\"\n) {\n  Server.open(method, url, true);\n  if (method.toUpperCase === POST)\n    Server.setRequestHeader(\"Content-Type\", \"application/json\");\n  if (parameter != null) Server.send(JSON.stringify(parameter));\n  else Server.send();\n\n  while (State[Server.readyState] != \"COMPLETED\") {\n    console.print(\"%S%S %S%S\", eraseInLine(0), processing, spiner(), BOL);\n    WScript.Sleep(50);\n  }\n  console.print(\"%S%S\", eraseInLine(0), finished);\n\n  const res = Server.responseText;\n  return JSON.parse(res);\n}\n\nfunction progress(indicator) {\n  let i = 0;\n  return function increment() {\n    return indicator[i++ % indicator.length];\n  };\n}\n\nfunction findUnusedPort(port) {\n  const command = \"netstat -nao\";\n  const netstat = WShell.Exec(command);\n  const res = netstat.StdOut.ReadAll();\n\n  while (true) {\n    port = port || parseInt(Math.random() * (65535 - 49152)) + 49152;\n    const exp = new RegExp(\n      \"(TCP|UDP)\\\\s+\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}:\" + port + \"\\\\s\"\n    );\n    if (!exp.test(res)) break;\n    port = null;\n  }\n  return port;\n}\n\n// exports\nmodule.exports = {\n  Window,\n  Document,\n  Element,\n  request,\n  getWebDriver,\n};\n\n// command line\nif (wes.Modules[wes.main].path === __filename) getWebDriver();\n} )()",
        "path": "{webdriver}/index.js",
        "mapping": {},
        "type": "transpiled"
    },
    "{ED77789E-4ADE-485B-A3DE-F01E2DD41AA7}": {
        "source": "{\n  \"name\": \"webdriver\",\n  \"version\": \"0.0.8\",\n  \"description\": \"Operate the browser with wes\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/webdriver.git\"\n  },\n  \"keywords\": [\n    \"webdriver\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/webdriver/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/webdriver#readme\"\n}\n",
        "path": "{webdriver}/package.json"
    }
}