{
    "{E99256FA-E033-43D6-9F08-CBBB2E1C11F9}": {
        "source": "(function $43$3A$2F$62$69$6E$2F$67$69$74$68$75$62$2F$77$65$62$64$72$69$76$65$72$2F$69$6E$64$65$78$2E$6A$73() { \"use strict\";const WShell = require('WScript.Shell')\r\nconst { eraseInLine, cursorHrAbs, brightGreen } = require('ansi')\r\nconst { download } = require('filesystem')\r\nconst { resolve, WorkingDirectory } = require('pathname')\r\n\r\nconst GET = 'GET'\r\nconst POST = 'POST'\r\nconst DELETE = 'DELETE'\r\nconst BOL = cursorHrAbs(1) // beginning of line\r\nconst ELEMENT_ID = 'element-6066-11e4-a52e-4f735466cecf'\r\nconst State = ['UNINITIALIZED', 'LOADING', 'LOADED', 'INTERACTIVE', 'COMPLETED']\r\nconst spiner = progress(['|', '/', '-', '\\\\', '|', '/', '-', '\\\\'])\r\n\r\nclass Window {\r\n    constructor(port, spec) {\r\n        const IServerXMLHTTPRequest2 = require('MSXML2.ServerXMLHTTP')\r\n\r\n        port = port || findUnusedPort(9515)\r\n        spec = spec || 'msedgedriver.exe'\r\n        const driver = WShell.Exec(`${spec} port=${port}`)\r\n        while (driver.Status != 0) {\r\n            console.print('%S%S %S', eraseInLine(1), 'driver ', spiner())\r\n            WScript.Sleep(50)\r\n        }\r\n        var { value } = request(\r\n            IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${port}/session`,\r\n            {\r\n                capabilities: {}\r\n            },\r\n            'Initialize'\r\n        )\r\n        const { sessionId } = value\r\n\r\n        this.port = port\r\n        this.driver = driver\r\n        this.sessionId = sessionId\r\n        this.IServerXMLHTTPRequest2 = IServerXMLHTTPRequest2\r\n        this.document = new Document(this)\r\n    }\r\n    rect(prop) {\r\n        // {x, y, width, height}\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window/rect`,\r\n            prop,\r\n            'window rect'\r\n        )\r\n    }\r\n    navigate(url) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\r\n            {\r\n                url: url\r\n            },\r\n            'Navegate'\r\n        )\r\n    }\r\n    close(messame) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\r\n            null,\r\n            'Close Window'\r\n        )\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${this.port}/session/${this.sessionId}`,\r\n            null,\r\n            'Delete Session'\r\n        )\r\n        this.driver.Terminate()\r\n        console.log(messame || '')\r\n    }\r\n    getURL() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\r\n            null,\r\n            'Get URL'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    back() {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/back`,\r\n            {},\r\n            'History Back'\r\n        )\r\n    }\r\n}\r\n\r\nclass Document {\r\n    constructor(window) {\r\n        this.parentWindow = window\r\n    }\r\n    querySelectorAll(selector) {\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/elements`,\r\n            {\r\n                using: 'css selector',\r\n                value: selector\r\n            },\r\n            'Select Elements'\r\n        )\r\n        const elms =\r\n            res != null\r\n                ? res.value.map((val) => new Element(this, val[ELEMENT_ID]))\r\n                : null\r\n        return elms\r\n    }\r\n    getTitle() {\r\n        const window = this.parentWindow\r\n        return request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/title`\r\n        )\r\n    }\r\n}\r\n\r\nclass Element {\r\n    constructor(document, elementId) {\r\n        this.parentDocument = document\r\n        this.elementId = elementId\r\n    }\r\n    querySelectorAll(selector) {\r\n        const document = this.parentDocument\r\n        const window = document.parentWindow\r\n        const res = require(window.IServerXMLHTTPRequest2, POST, `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/elements`, {\r\n            using: 'css selector',\r\n            value: selector\r\n        }, 'Select Elements')\r\n        const elms =\r\n            res != null\r\n                ? res.value.map((val) => new Element(document, val[ELEMENT_ID]))\r\n                : null\r\n        return elms\r\n    }\r\n    getAttribute(attribute) {\r\n        const window = this.parentDocument.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/attribute/${attribute}`,\r\n            null,\r\n            'Get Attribute'\r\n        )\r\n        return res ? res.value : 'null'\r\n    }\r\n    getProperty(property) {\r\n        const window = this.parentDocument.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/property/${property}`,\r\n            null,\r\n            'Get Property'\r\n        )\r\n        return res ? res.value : 'null'\r\n    }\r\n    click() {\r\n        const window = this.parentDocument.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/click`,\r\n            {},\r\n            'Click Element'\r\n        )\r\n    }\r\n    setValue(text) {\r\n        const window = this.parentDocument.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/value`,\r\n            {\r\n                text\r\n            },\r\n            'Input Value'\r\n        )\r\n    }\r\n}\r\n\r\nfunction getWebDriver() {\r\n    const version = WShell.exec(\r\n        'powershell -Command Get-AppxPackage -Name Microsoft.MicrosoftEdge.* | foreach{$_.Version}'\r\n    ).StdOut.ReadAll()\r\n\r\n    const architecture =\r\n        require('WScript.Shell')\r\n            .Environment('Process')\r\n            .Item('PROCESSOR_ARCHITECTURE') === 'x86'\r\n            ? '32'\r\n            : '64'\r\n\r\n    const url = `https://msedgedriver.azureedge.net/${version}/edgedriver_win${architecture}.zip`\r\n\r\n    download(\r\n        url,\r\n        resolve(WorkingDirectory, `edgedriver_win${architecture}.zip`)\r\n    )\r\n    console.log('%sDownload of webdriver is complete!', brightGreen)\r\n}\r\n\r\n// util\r\nfunction request(\r\n    Server,\r\n    method,\r\n    url,\r\n    parameter,\r\n    processing = '',\r\n    finished = ''\r\n) {\r\n    Server.open(method, url, true)\r\n    if (method.toUpperCase === POST)\r\n        Server.setRequestHeader('Content-Type', 'application/json')\r\n    if (parameter != null) Server.send(JSON.stringify(parameter))\r\n    else Server.send()\r\n\r\n    while (State[Server.readyState] != 'COMPLETED') {\r\n        console.print('%S%S %S%S', eraseInLine(0), processing, spiner(), BOL)\r\n        WScript.Sleep(50)\r\n    }\r\n    console.print('%S%S', eraseInLine(0), finished)\r\n\r\n    const res = Server.responseText\r\n    return JSON.parse(res)\r\n}\r\n\r\nfunction progress(indicator) {\r\n    let i = 0\r\n    return function increment() {\r\n        return indicator[i++ % indicator.length]\r\n    }\r\n}\r\n\r\nfunction findUnusedPort(port) {\r\n    const command = 'netstat -nao'\r\n    const netstat = WShell.Exec(command)\r\n    const res = netstat.StdOut.ReadAll()\r\n\r\n    while (true) {\r\n        port = port || parseInt(Math.random() * (65535 - 49152)) + 49152\r\n        const exp = new RegExp(\r\n            '(TCP|UDP)\\\\s+\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}:' + port + '\\\\s'\r\n        )\r\n        if (!exp.test(res)) break\r\n        port = null\r\n    }\r\n    return port\r\n}\r\n\r\n// exports\r\nmodule.exports = {\r\n    Window,\r\n    Document,\r\n    Element,\r\n    request,\r\n    getWebDriver\r\n}\r\n\r\n// command line\r\nif (wes.Modules[wes.main].path === __filename) getWebDriver()\r\n} )()",
        "path": "{webdriver}/index.js",
        "mapping": {},
        "type": "transpiled"
    },
    "{C3368896-8835-42F5-86AC-FE76DEAA031D}": {
        "source": "{\n  \"name\": \"webdriver\",\n  \"version\": \"0.0.6\",\n  \"description\": \"Operate the browser with wes\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/webdriver.git\"\n  },\n  \"keywords\": [\n    \"webdriver\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/webdriver/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/webdriver#readme\"\n}\n",
        "path": "{webdriver}/package.json"
    }
}