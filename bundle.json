{
  "{A5C6C5F8-5E33-4C84-94D5-78277E0EF820}": {
    "source": "{\n  \"name\": \"webdriver\",\n  \"version\": \"0.5.0\",\n  \"description\": \"Operate the browser with wes\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/webdriver.git\"\n  },\n  \"keywords\": [\n    \"webdriver\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/webdriver/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/webdriver#readme\"\n}",
    "mapping": {},
    "path": "{webdriver}/package.json"
  },
  "{A781C082-698E-4A16-AB91-B26A1D7AF884}": {
    "source": "const WShell = require('WScript.Shell')\r\nconst { eraseInLine, cursorHrAbs, color } = require('ansi')\r\nconst { has } = require('argv')\r\nconst { moveFileSync, deleteFileSync, deletedirSync, existsFileSync, existsdirSync, download } = require('filesystem')\r\nconst { resolve, WorkingDirectory, toPosixSep } = require('pathname')\r\nconst { unzip } = require('zip')\r\nconst isCLI = require('isCLI')\r\n\r\nconst GET = 'GET'\r\nconst POST = 'POST'\r\nconst DELETE = 'DELETE'\r\nconst BOL = cursorHrAbs(1) // beginning of line\r\nconst EIL = eraseInLine(0) // erase in line\r\nconst ELEMENT_ID = 'element-6066-11e4-a52e-4f735466cecf'\r\nconst State = ['UNINITIALIZED', 'LOADING', 'LOADED', 'INTERACTIVE', 'COMPLETED']\r\nconst spiner = progress(['|', '/', '-', '\\\\'])\r\nconst orange = color('#FFA500')\r\nconst EDGE = 'msedgedriver.exe'\r\nconst CHROME = 'chromedriver.exe'\r\nconst GECKO = 'geckodriver.exe'\r\n\r\nclass Window {\r\n    constructor(port, spec = EDGE, parameter = { capabilities: {} }) {\r\n        const IServerXMLHTTPRequest2 = require('MSXML2.ServerXMLHTTP')\r\n\r\n        port = port || findUnusedPort(9515)\r\n        spec = spec.toUpperCase() === 'CHROME' ? CHROME :\r\n            spec.toUpperCase() === 'GECKO' ? GECKO :\r\n                spec.toUpperCase() === 'EDGE' ? EDGE : spec\r\n        const driver = WShell.Exec(`${spec} --port=${port} --silent`)\r\n\r\n        var { value } = request(\r\n            IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${port}/session`,\r\n            parameter,\r\n            'Initialize Session'\r\n        )\r\n        const { sessionId } = value\r\n\r\n        this.port = port\r\n        this.driver = driver\r\n        this.sessionId = sessionId\r\n        this.IServerXMLHTTPRequest2 = IServerXMLHTTPRequest2\r\n        this.document = new Document(this)\r\n    }\r\n    rect(prop) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window/rect`,\r\n            prop,\r\n            'Set Window Rect'\r\n        )\r\n    }\r\n    navigate(url) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\r\n            {\r\n                url: url\r\n            },\r\n            'Navegate URL'\r\n        )\r\n    }\r\n    back() {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/back`,\r\n            {},\r\n            'Back History'\r\n        )\r\n    }\r\n    forward() {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/forward`,\r\n            {},\r\n            'Forward History'\r\n        )\r\n    }\r\n    getURL() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\r\n            null,\r\n            'Get URL'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    getStatus() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/status`,\r\n            null,\r\n            'Get Status'\r\n        )\r\n        if (res) return res.value\r\n    }\r\n    getHandle() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\r\n            null,\r\n            'Get Handle'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    getHandles() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window/handles`,\r\n            null,\r\n            'Get Handles'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    switchTo(windowHandle) {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\r\n            {\r\n                handle: windowHandle\r\n            },\r\n            'Switch Window'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    move(handle) {\r\n        const currHandle = this.getHandle()\r\n        if (!handle) handle = this.getHandles().filter((hnd) => (hnd === currHandle ? false : true))[0]\r\n        this.switchTo(handle)\r\n        const url = this.getURL()\r\n        this.switchTo(currHandle)\r\n        this.navigate(url)\r\n        this.switchTo(handle)\r\n        this.close()\r\n        this.switchTo(currHandle)\r\n    }\r\n    newWindow() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window/new`,\r\n            {},\r\n            'New Window'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    close(message) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\r\n            null,\r\n            'Close Window'\r\n        )\r\n        if (message != null) console.log(message)\r\n    }\r\n    delete(message) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${this.port}/session/${this.sessionId}`,\r\n            null,\r\n            'Delete Session'\r\n        )\r\n        this.driver.Terminate()\r\n        if (message != null) console.log(message)\r\n    }\r\n    quit(message) {\r\n        this.close()\r\n        this.delete(message)\r\n    }\r\n}\r\n\r\nclass Document {\r\n    constructor(window) {\r\n        this.parentWindow = window\r\n    }\r\n    querySelectorAll(selector) {\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/elements`,\r\n            {\r\n                using: 'css selector',\r\n                value: selector\r\n            },\r\n            'Select Elements'\r\n        )\r\n        const elms = res != null ? res.value.map((val) => new Element(this, val[ELEMENT_ID])) : null\r\n        return elms\r\n    }\r\n    xpath(path) {\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/elements`,\r\n            {\r\n                using: 'xpath',\r\n                value: path\r\n            },\r\n            'Select Elements'\r\n        )\r\n        const elms = res != null ? res.value.map((val) => new Element(this, val[ELEMENT_ID])) : null\r\n        return elms\r\n    }\r\n    getTitle() {\r\n        const window = this.parentWindow\r\n        return request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/title`\r\n        )\r\n    }\r\n    getSource() {\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/source`,\r\n            {},\r\n            'Get Source'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    executeScript(script = function () { }, args = []) {\r\n        const code = `return (${String(script)})(...arguments)`\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/execute/sync`,\r\n            {\r\n                script: code,\r\n                args\r\n            },\r\n            'Execute Script'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    takeScreenShot() {\r\n        const window = this.parentWindow\r\n        const { document } = window\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/screenshot`,\r\n            {},\r\n            'Take ScreenShot'\r\n        )\r\n        if (!res) return null\r\n        const message = document.executeScript(() => document.readyState)\r\n        console.log('take screen shot %O', message)\r\n\r\n        const DOMDocument = require('MSXML2.DOMDocument.3.0')\r\n        const IXMLDOMElement = DOMDocument.createElement('base64')\r\n        IXMLDOMElement.dataType = 'bin.base64'\r\n        IXMLDOMElement.text = res.value\r\n        return IXMLDOMElement.nodeTypedValue\r\n    }\r\n    getCookie(name) {\r\n        const window = this.parentWindow\r\n        const url = `http://localhost:${window.port}/session/${window.sessionId}/cookie` + (name != null ? '/' + name : '')\r\n        const res = request(window.IServerXMLHTTPRequest2, GET, url, null, 'Get Cookie')\r\n        return res ? res.value : null\r\n    }\r\n    addCookie(cookie) {\r\n        // cookie: {name: string, value: string, domain: string?, httpOnly: boolean?, path: string?, secure: boolean?}\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/cookie`,\r\n            { cookie },\r\n            'Add Cookie'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    deleteCookie(name) {\r\n        const window = this.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/cookie/${name}`,\r\n            null,\r\n            'Delete Cookie'\r\n        )\r\n    }\r\n}\r\n\r\nclass Element {\r\n    constructor(document, elementId) {\r\n        this.parentDocument = document\r\n        this.elementId = elementId\r\n    }\r\n    querySelectorAll(selector) {\r\n        const document = this.parentDocument\r\n        const window = document.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/elements`,\r\n            {\r\n                using: 'css selector',\r\n                value: selector\r\n            },\r\n            'Select Elements'\r\n        )\r\n        const elms = res != null ? res.value.map((val) => new Element(document, val[ELEMENT_ID])) : null\r\n        return elms\r\n    }\r\n    getAttribute(attribute) {\r\n        const window = this.parentDocument.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/attribute/${attribute}`,\r\n            null,\r\n            'Get Attribute'\r\n        )\r\n        return res ? res.value : 'null'\r\n    }\r\n    getProperty(property) {\r\n        const window = this.parentDocument.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/property/${property}`,\r\n            null,\r\n            'Get Property'\r\n        )\r\n        return res ? res.value : 'null'\r\n    }\r\n    click() {\r\n        const window = this.parentDocument.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/click`,\r\n            {},\r\n            'Click Element'\r\n        )\r\n    }\r\n    setValue(text) {\r\n        const window = this.parentDocument.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/value`,\r\n            {\r\n                text\r\n            },\r\n            'Input Value'\r\n        )\r\n    }\r\n    takeScreenShot() {\r\n        const document = this.parentDocument\r\n        const window = document.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/screenshot`,\r\n            {},\r\n            'Take ScreenShot'\r\n        )\r\n        if (!res) return null\r\n        const message = document.executeScript(() => document.readyState)\r\n        console.log('take screen shot %O', message)\r\n\r\n        const DOMDocument = require('MSXML2.DOMDocument.3.0')\r\n        const IXMLDOMElement = DOMDocument.createElement('base64')\r\n        IXMLDOMElement.dataType = 'bin.base64'\r\n        IXMLDOMElement.text = res.value\r\n        return IXMLDOMElement.nodeTypedValue\r\n    }\r\n}\r\n\r\n// util\r\nfunction getChromeVersion(spec = '\"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\"') {\r\n    const [version] = WShell.exec(`cmd /C dir /B /O-N ${spec}`).StdOut.ReadAll().trim().split(/\\r?\\n/).slice(-1)\r\n    return version\r\n}\r\n\r\nfunction getChromeDriverVersion(spec = CHROME) {\r\n    return WShell.exec(`cmd /C ${spec} -v`)\r\n        .StdOut.ReadAll()\r\n        .trim()\r\n        .replace(/^ChromeDriver ([\\d\\.]+) .+/, '$1')\r\n}\r\n\r\nfunction getFireFoxVersion(spec = '\"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\"') {\r\n    return WShell.exec(`cmd /C ${spec} -v`).StdOut.ReadAll().trim().slice('Mozilla Firefox '.length)\r\n}\r\n\r\nfunction getFireFoxDriverVersion(spec = GECKO) {\r\n    return WShell.exec(`cmd /C ${spec} -V`)\r\n        .StdOut.ReadAll()\r\n        .trim()\r\n        .split(/\\r?\\n/)[0]\r\n        .replace(/^geckodriver ([\\d\\.]+) .+/, '$1')\r\n}\r\n\r\nfunction getEdgeVersion() {\r\n    return WShell.exec('powershell -Command Get-AppxPackage -Name Microsoft.MicrosoftEdge.* | foreach{$_.Version}')\r\n        .StdOut.ReadAll()\r\n        .trim()\r\n}\r\n\r\nfunction getEdgeDriverVersion(spec = EDGE) {\r\n    return WShell.exec(`cmd /C ${spec} -v`)\r\n        .StdOut.ReadAll()\r\n        .trim()\r\n        .replace(/^MSEdgeDriver ([\\d\\.]+) .+/, '$1')\r\n}\r\n\r\nfunction request(Server, method, url, parameter, processing, finished) {\r\n    Server.open(method, url, true)\r\n    if (method.toUpperCase() === POST) Server.setRequestHeader('Content-Type', 'application/json')\r\n    if (parameter != null) Server.send(JSON.stringify(parameter))\r\n    else Server.send()\r\n\r\n    let display\r\n    while (State[Server.readyState] != 'COMPLETED') {\r\n        if (processing !== null) console.print(`${BOL}${processing} ${spiner()} ${State[Server.readyState]}${EIL}`)\r\n        WScript.Sleep(50)\r\n    }\r\n\r\n    if (Server.status != 200) {\r\n        throw new Error('Server Error: ' + Server.status + '\\nurl: ' + url + '\\nparameter: ' + parameter != null ? JSON.stringify(parameter, null, 2) : '{}')\r\n    }\r\n\r\n    console.print(`${BOL}${finished != null ? finished : ''}${display}${EIL}${BOL}`)\r\n\r\n    const res = Server.responseText\r\n    return JSON.parse(res)\r\n}\r\n\r\nfunction progress(indicator) {\r\n    let i = 0\r\n    return function increment() {\r\n        return indicator[i++ % indicator.length]\r\n    }\r\n}\r\n\r\nfunction findUnusedPort(port) {\r\n    const command = 'netstat -nao'\r\n    const netstat = WShell.Exec(command)\r\n    const res = netstat.StdOut.ReadAll()\r\n\r\n    while (true) {\r\n        port = port || parseInt(Math.random() * (65535 - 49152)) + 49152\r\n        const exp = new RegExp('(TCP|UDP)\\\\s+\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}:' + port + '\\\\s')\r\n        if (!exp.test(res)) break\r\n        port = null\r\n    }\r\n    return port\r\n}\r\n\r\nfunction getEdgeWebDriver() {\r\n    const version = getEdgeVersion()\r\n    const driver = getEdgeDriverVersion()\r\n    if (version === driver) return console.log('Both are installed with the correct version // => %O', version)\r\n\r\n    const filename = 'msedgedriver.exe'\r\n    const architecture = WShell.Environment('Process').Item('PROCESSOR_ARCHITECTURE') === 'x86' ? '32' : '64'\r\n\r\n    const url = `https://msedgedriver.azureedge.net/${version}/edgedriver_win${architecture}.zip`\r\n    const zipSpec = resolve(WorkingDirectory, `edgedriver_win${architecture}.zip`)\r\n    let dirSpec\r\n    let fileSpec = resolve(WorkingDirectory, filename)\r\n    try {\r\n        console.log(download(url, zipSpec))\r\n        console.log('unzip %O', (dirSpec = toPosixSep(unzip(zipSpec))))\r\n        if (existsFileSync(fileSpec)) deleteFileSync(fileSpec)\r\n        console.log(moveFileSync(resolve(dirSpec, filename), fileSpec))\r\n        console.log(deletedirSync(dirSpec))\r\n        console.log(deleteFileSync(zipSpec))\r\n        console.log('%SDownload of webdriver is complete. version: %S', orange, version)\r\n    } catch (error) {\r\n        console.log('%SFailed to download webdriver. version %S', orange, version)\r\n        throw error\r\n    } finally {\r\n        if (existsFileSync(zipSpec)) console.log(deleteFileSync(zipSpec))\r\n        if (existsdirSync(dirSpec)) console.log(deletedirSync(dirSpec))\r\n    }\r\n}\r\n\r\n// exports\r\nmodule.exports = {\r\n    Window,\r\n    Document,\r\n    Element,\r\n    request,\r\n    getEdgeWebDriver\r\n}\r\n\r\n// command line\r\nif (isCLI(__filename) && (has('d') || has('download'))) getEdgeWebDriver()\r\n",
    "mapping": {},
    "path": "{webdriver}/index.js"
  },
  "{365CEF4B-427F-49A9-A63E-D4CC87B73CF9}": {
    "source": "{\n  \"name\": \"webdriver\",\n  \"version\": \"0.5.0\",\n  \"description\": \"Operate the browser with wes\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/webdriver.git\"\n  },\n  \"keywords\": [\n    \"webdriver\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/webdriver/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/webdriver#readme\"\n}",
    "path": "{webdriver}/package.json"
  }
}